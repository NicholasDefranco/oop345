me: Nicholas Defranco
Seneca Student ID: 106732183
Seneca email: ndefranco@myseneca.ca
Date of completion: Wednesday, Spetember 18th, 2019
  
	In this workshop, I learned how to create an application that 
accepts command-line arguments. In order to accept command-line arguments, 
the beginning of the executable, the main function, must specify two 
parameters. The first argument is called argc (which stands for ARGument 
Count) and it is of type int. Argc represents the amount of command-line 
arguments that were passed to the executable. The second argument is called 
argv (which stands for ARGument Vector) and it is an array of character 
pointers. Each character pointer in the array points to a C-style null-
terminated string representing one of the command-line arguments passed. The 
array of character pointers is stored in the data segment of RAM as it is 
available for the entire lifetime of the program. This is known as static 
duration.  (2)Another example of static duration is the local static 
variable defined in the free helper insertion operator function used to 
count the amount of times the function was called. An alternative design to 
count the amount of times a function is called is by using a global variable
. The disadvantage of using a global variable is that other functions are 
able to freely access and modify the value of the variable. The use of a 
static variable does not allow this to happen as it is local to that function. 

	(1)External linkage allows referencing a variable defined in another 
scope in another module (or translation unit). We specify external linkage 
with the extern keyword. Such as the declaration: 

extern unsigned g_maxSize;

found in the String.h file. This identifier references the unsigned int 
variable defined in String.cpp:

unsigned g_maxSize {3u};

Conversely, a variable with internal linkage is inaccessible to outside 
modules (or translation units). If the g_maxSize variable had internal 
linkage, the extern declaration found in String.h would cause a compilation 
error as it is no longer accessible outside String.cpp.

	(3)The String class was upgraded to allow instances of the class to 
be able to store a string of any length. That is, instances must manage a 
resource which was a dynamically allocated character array in this assignment
. The resource is accessed through a resource instance pointer. In this 
assignment the resource instance pointer was a char *. The resource instance 
pointer was initialized with the value of nullptr to ensure the pointer does 
not point to memory that does not belong to the executable. 
	
	In the custom one-argument constructor, memory must be allocated to 
be able copy the incoming data from the client that was received in the 
parameter list assuming the data is valid. We allocate memory off the heap 
segment of RAM. Once memory is allocated, the address of the newly allocated 
block is returned which is assigned to the resource instance pointer. We 
then deep copy the source string to the instance’s resource. If the data is 
invalid however, the resource instance pointer will remain pointing to nullptr.

	In the copy assignment operator, the function first checks for self-
assignment to ensure that future logic will not break. Next, if not self-
assigned, memory allocated for the current object’s resource must be 
deallocated. Then, a new block of memory must be allocated to the current 
object’s resource to be able to accommodate the size of the right operand’s 
resource. Finally a deep copy is performed. Sometimes, the right operand’s 
resource instance pointer may point to nullptr. In this case, the current 
object’s resource instance pointer only needs to to be set to nullptr after 
deallocation. In the case of self-assignment, the function will do nothing. 
Regardless of the logical path is taken, the function will always return a 
reference to the left operand to allow for a cascading assignment statement.

Quiz 1 Reflection

Question #2: I did not specify how a rvalue differs from an lvalue (how 
lvalue differs was specified, so only rvalue will be mentioned in my 
correction). 

An rvalue usually represents an object that is about to go out of scope. It 
can also be a temporary object, an object that is created and destroyed on 
the same line. References to rvalues are used in the move constructor and 
move-assignment operator.
